import numpy as np


def second_derivative(f, x, h):
    """
    Вычисляет вторую производную функции f в точке x с шагом h
    методом неопределенных коэффициентов для n = 3.

    Формула:
    f''(x) ≈ (f(x - h) - 2 * f(x) + f(x + h)) / h^2

    Как была найдена формула:
    1. Используем три точки: x_0 - h, x_0, и x_0 + h.
    2. Запишем разложение в ряд Тейлора для f(x) в этих точках:
       f(x_0 - h) ≈ f(x_0) - f'(x_0)h + (f''(x_0)h^2)/2 - (f'''(x_0)h^3)/6 + O(h^4)
       f(x_0 + h) ≈ f(x_0) + f'(x_0)h + (f''(x_0)h^2)/2 + (f'''(x_0)h^3)/6 + O(h^4)
    3. Складывая и вычитая эти выражения, получаем:
       f(x_0 - h) + f(x_0 + h) - 2f(x_0) ≈ (f''(x_0)h^2)
    4. Делим на h^2 и получаем:
       f''(x_0) ≈ (f(x_0 - h) - 2 * f(x_0) + f(x_0 + h)) / h^2

    Параметры:
    f : function
        Функция, чью вторую производную нужно вычислить.
    x : float
        Точка, в которой вычисляется вторая производная.
    h : float
        Шаг конечных разностей.

    Возвращает:
    float
        Приближение второй производной функции f в точке x.
    """
    # Формула для численного дифференцирования второй производной
    formula = f"f''(x) ≈ (f(x - {h}) - 2 * f(x) + f(x + {h})) / {h}^2"
    print("Используемая формула:", formula)

    return (f(x - h) - 2 * f(x) + f(x + h)) / h ** 2


def test_function(x):
    """
    Тестовая функция для численного дифференцирования.

    Параметры:
    x : float
        Точка, в которой вычисляется значение функции.

    Возвращает:
    float
        Значение функции sin(x) в точке x.
    """
    return np.sin(x)


def true_second_derivative(x):
    """
    Аналитическое значение второй производной тестовой функции.

    Параметры:
    x : float
        Точка, в которой вычисляется значение второй производной.

    Возвращает:
    float
        Значение второй производной функции sin(x) в точке x, которое равно -sin(x).
    """
    return -np.sin(x)


# Точка, в которой будет проводиться вычисление
x = np.pi / 4

# Массив значений шага для проверки точности метода
h_values = [0.1, 0.05, 0.01, 0.005, 0.001]

# Печать общей формулы для численного дифференцирования второй производной
print("Общая формула для численного дифференцирования второй производной:")
print("f''(x) ≈ (f(x - h) - 2 * f(x) + f(x + h)) / h^2")
print()

# Цикл по различным значениям шага h
for h in h_values:
    # Вычисление численного значения второй производной с выводом формулы
    numerical = second_derivative(test_function, x, h)

    # Вычисление аналитического значения второй производной
    true_value = true_second_derivative(x)

    # Вычисление абсолютной ошибки
    error = abs(numerical - true_value)

    # Вывод результатов
    # h: шаг конечных разностей
    # Numerical: численное значение второй производной, вычисленное методом конечных разностей
    # True: истинное (аналитическое) значение второй производной
    # Error: абсолютная ошибка между численным и истинным значением второй производной
    print(f"h: {h}, Numerical: {numerical}, True: {true_value}, Error: {error}")

    # Проверка, что ошибка меньше шага h
    assert error < h, f"Ошибка {error} больше шага {h}"
